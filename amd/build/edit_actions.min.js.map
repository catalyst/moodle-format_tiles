{"version":3,"sourceRoot":"..","sources":["server/course/format/tiles/amd/src/edit_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript Module to handle in course actions like delete / hide activity\n *\n * @module edit_actions\n * @package course/format\n * @subpackage tiles\n * @copyright 2019 David Watson {@link http://evolutioncode.uk}\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since Moodle 3.3\n */\n\n/* eslint space-before-function-paren: 0 */\n\ndefine([\"jquery\", \"core/str\", 'core/notification'], function ($, str, Notification) {\n    \"use strict\";\n    // Much of this is copied from core_course/actions because we cannot access the originals from \"Tiles\".\n    // We could reinitialise *all* sections using core, but that would create multiple listeners for each item.\n    // We want to do it instead by *section*, so we have to do it ourselves.\n\n    var Selector = {\n        ACTIONAREA: '.actions'\n    };\n\n    var CSS = {\n        EDITINPROGRESS: 'editinprogress'\n    };\n\n    /**\n     * Wrapper for Y.Moodle.core_course.util.cm.getName\n     *\n     * @param {object} element\n     * @returns {String}\n     */\n    var getModuleName = function(element) {\n        var name = '';\n        Y.use('moodle-course-util', function(Y) {\n            name = Y.Moodle.core_course.util.cm.getName(Y.Node(element.get(0)));\n        });\n        return name;\n    };\n\n    /**\n     * Displays the delete confirmation to delete a module\n     *\n     * @param {object} mainelement activity element we perform action on\n     * @param {function} onconfirm function to execute on confirm\n     */\n    var confirmDeleteModule = function(mainelement, onconfirm) {\n        var modtypename = mainelement.attr('class').match(/modtype_([^\\s]*)/)[1];\n        var modulename = getModuleName(mainelement);\n\n        str.get_string('pluginname', modtypename).done(function(pluginname) {\n            var plugindata = {\n                type: pluginname,\n                name: modulename\n            };\n            str.get_strings([\n                {key: 'confirm'},\n                {\n                    key: (modulename === null ? 'deletechecktype' : 'deletechecktypename'),\n                    param: plugindata\n                },\n                {key: 'yes'},\n                {key: 'no'}\n            ]).done(function(s) {\n                    Notification.confirm(s[0], s[1], s[2], s[3], onconfirm);\n            }).fail(\n                Notification.exception\n            );\n        });\n    };\n\n    /**\n     * Wrapper for M.util.add_spinner for an activity\n     *\n     * @param {object} activity\n     * @returns {Node}\n     */\n    var addActivitySpinner = function(activity) {\n        activity.addClass(CSS.EDITINPROGRESS);\n        var actionarea = activity.find(Selector.ACTIONAREA).get(0);\n        if (actionarea) {\n            var spinner = M.util.add_spinner(Y, Y.Node(actionarea));\n            spinner.show();\n            return spinner;\n        }\n        return null;\n    };\n\n    /**\n     * Wrapper for M.util.add_lightbox\n     *\n     * @param {object} sectionelement\n     * @returns {Node}\n     */\n    var addSectionLightbox = function(sectionelement) {\n        var lightbox = M.util.add_lightbox(Y, Y.Node(sectionelement.get(0)));\n        lightbox.show();\n        return lightbox;\n    };\n\n    /**\n     * Removes the spinner element\n     *\n     * @param {object} element\n     * @param {Node} spinner\n     * @param {Number} delay\n     */\n    var removeSpinner = function(element, spinner, delay) {\n        window.setTimeout(function() {\n            element.removeClass(CSS.EDITINPROGRESS);\n            if (spinner) {\n                spinner.hide();\n            }\n        }, delay);\n    };\n\n    /**\n     * Removes the lightbox element\n     *\n     * @param {Node} lightbox lighbox YUI element returned by addSectionLightbox\n     * @param {Number} delay\n     */\n    var removeLightbox = function(lightbox, delay) {\n        if (lightbox) {\n            window.setTimeout(function() {\n                lightbox.hide();\n            }, delay);\n        }\n    };\n\n    return {\n        confirmDeleteModule: function(mainelement, onconfirm) {\n            confirmDeleteModule(mainelement, onconfirm);\n        },\n        removeLightbox: function (lightbox, delay) {\n            removeLightbox(lightbox, delay);\n        },\n        removeSpinner: function (element, spinner, delay) {\n            removeSpinner(element, spinner, delay);\n        },\n        getModuleName: function (element) {\n            getModuleName(element);\n        },\n        addSectionLightbox: function(sectionelement) {\n            addSectionLightbox(sectionelement);\n        },\n        addActivitySpinner: function(activity) {\n            addActivitySpinner(activity);\n        }\n    };\n});"],"names":["define","$","str","Notification","Selector","ACTIONAREA","CSS","EDITINPROGRESS","getModuleName","element","name","Y","use","Moodle","core_course","util","cm","getName","Node","get","confirmDeleteModule","mainelement","onconfirm","modtypename","attr","match","modulename","get_string","done","pluginname","plugindata","type","get_strings","key","param","s","confirm","fail","exception","addActivitySpinner","activity","addClass","actionarea","find","spinner","M","add_spinner","show","addSectionLightbox","sectionelement","lightbox","add_lightbox","removeSpinner","delay","window","setTimeout","removeClass","hide","removeLightbox"],"mappings":"AA4BAA,OAAO,CAAC,SAAU,WAAY,qBAAsB,SAAUC,EAAGC,IAAKC,cAClE,aAKA,IAAIC,SAAW,CACXC,WAAY,UAChB,EAEA,IAAIC,IAAM,CACNC,eAAgB,gBACpB,EAQA,IAAIC,cAAgB,SAASC,SACzB,IAAIC,KAAO,GACXC,EAAEC,IAAI,qBAAsB,SAASD,GACjCD,KAAOC,EAAEE,OAAOC,YAAYC,KAAKC,GAAGC,QAAQN,EAAEO,KAAKT,QAAQU,IAAI,CAAC,CAAC,CAAC,CACtE,CAAC,EACD,OAAOT,IACX,EAQA,IAAIU,oBAAsB,SAASC,YAAaC,WAC5C,IAAIC,YAAcF,YAAYG,KAAK,OAAO,EAAEC,MAAM,kBAAkB,EAAE,GACtE,IAAIC,WAAalB,cAAca,WAAW,EAE1CnB,IAAIyB,WAAW,aAAcJ,WAAW,EAAEK,KAAK,SAASC,YACpD,IAAIC,WAAa,CACbC,KAAMF,WACNnB,KAAMgB,UACV,EACAxB,IAAI8B,YAAY,CACZ,CAACC,IAAK,SAAS,EACf,CACIA,IAAMP,aAAe,KAAO,kBAAoB,sBAChDQ,MAAOJ,UACX,EACA,CAACG,IAAK,KAAK,EACX,CAACA,IAAK,IAAI,EACb,EAAEL,KAAK,SAASO,GACThC,aAAaiC,QAAQD,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIb,SAAS,CAC9D,CAAC,EAAEe,KACClC,aAAamC,SACjB,CACJ,CAAC,CACL,EAQA,IAAIC,mBAAqB,SAASC,UAC9BA,SAASC,SAASnC,IAAIC,cAAc,EACpC,IAAImC,WAAaF,SAASG,KAAKvC,SAASC,UAAU,EAAEc,IAAI,CAAC,EACzD,GAAIuB,WAAY,CACZ,IAAIE,QAAUC,EAAE9B,KAAK+B,YAAYnC,EAAGA,EAAEO,KAAKwB,UAAU,CAAC,EACtDE,QAAQG,KAAK,EACb,OAAOH,OACX,CACA,OAAO,IACX,EAQA,IAAII,mBAAqB,SAASC,gBAC9B,IAAIC,SAAWL,EAAE9B,KAAKoC,aAAaxC,EAAGA,EAAEO,KAAK+B,eAAe9B,IAAI,CAAC,CAAC,CAAC,EACnE+B,SAASH,KAAK,EACd,OAAOG,QACX,EASA,IAAIE,cAAgB,SAAS3C,QAASmC,QAASS,OAC3CC,OAAOC,WAAW,WACd9C,QAAQ+C,YAAYlD,IAAIC,cAAc,EACtC,GAAIqC,QAAS,CACTA,QAAQa,KAAK,CACjB,CACJ,EAAGJ,KAAK,CACZ,EAQA,IAAIK,eAAiB,SAASR,SAAUG,OACpC,GAAIH,SAAU,CACVI,OAAOC,WAAW,WACdL,SAASO,KAAK,CAClB,EAAGJ,KAAK,CACZ,CACJ,EAEA,MAAO,CACHjC,oBAAqB,SAASC,YAAaC,WACvCF,oBAAoBC,YAAaC,SAAS,CAC9C,EACAoC,eAAgB,SAAUR,SAAUG,OAChCK,eAAeR,SAAUG,KAAK,CAClC,EACAD,cAAe,SAAU3C,QAASmC,QAASS,OACvCD,cAAc3C,QAASmC,QAASS,KAAK,CACzC,EACA7C,cAAe,SAAUC,SACrBD,cAAcC,OAAO,CACzB,EACAuC,mBAAoB,SAASC,gBACzBD,mBAAmBC,cAAc,CACrC,EACAV,mBAAoB,SAASC,UACzBD,mBAAmBC,QAAQ,CAC/B,CACJ,CACJ,CAAC"}