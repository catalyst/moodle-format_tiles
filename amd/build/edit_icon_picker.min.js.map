{"version":3,"sourceRoot":"..","sources":["server/course/format/tiles/amd/src/edit_icon_picker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle the icon picker dialogue for format_tiles\n * which the editing user uses to select an icon for a tile or the default icon\n * for all tiles in the course\n *\n * @module      icon_picker\n * @package     course/format\n * @subpackage  tiles\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/ajax\", \"core/str\", \"core/notification\", \"core/config\"],\n    function ($, Templates, ajax, str, Notification, config) {\n        \"use strict\";\n\n        var modalStored;\n        var stringStore = {pickAnIcon: ''};\n        var iconSet = [];\n        var recentPhotoSet = [];\n\n        /**\n         * Get the available icon set and photo set and store them for later use.\n         * @param {number}courseId\n         * @param {function|undefined} callback what to do after.\n         */\n        var getAndStoreIconSet = function(courseId, callback) {\n            var photosPromises = ajax.call([{\n                methodname: \"format_tiles_get_icon_set\",\n                args: {courseid: courseId}\n            }]);\n            photosPromises[0].done(function (response) {\n                if (response.photos) {\n                    recentPhotoSet = JSON.parse(response.photos);\n                }\n                var icons = JSON.parse(response.icons);\n                Object.keys(icons).forEach(function(icon) {\n                    iconSet.push({\n                        filename: 'tileicon/' + icon,\n                        displayname: icons[icon],\n                        tileiconcontext: {\n                            attributes: [\n                                {\n                                    name: 'src',\n                                    value: config.wwwroot + '/theme/image.php?theme=' + config.theme + '&component=format_tiles&image=' + 'tileicon/' + icon,\n                                }\n                            ]\n                        }\n                    });\n                });\n                if (iconSet.length <= 0) {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"Error empty icon set\");\n                        log.debug(response);\n                    });\n                }\n                if (typeof callback === \"function\") {\n                    callback();\n                }\n\n                // Check if there are any photos in the library that need deleting.\n                var photoNames = recentPhotoSet.map(function(photo) {\n                    return photo.filename;\n                });\n                $(\"#iconpickerphotos\").find(\".photo\").each(function (index, ph) {\n                    ph = $(ph);\n                    if (photoNames.indexOf(ph.attr(\"data-filename\")) === -1) {\n                        ph.fadeOut(500);\n                    }\n                });\n                if (response.status !== true) {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"Non true status response when getting icon set\");\n                        log.debug(response);\n                    });\n                }\n            });\n            photosPromises[0].fail(function (response) {\n                require([\"core/log\"], function(log) {\n                    log.error(\"Fail when getting icon set\");\n                    log.debug(response);\n                });\n            });\n        };\n\n        /**\n         * Get the URL for a link for a photo tile button (to access the edit form).\n         * @param {number} courseId\n         * @param {number} sectionId\n         * @returns {string}\n         */\n        var getPhotoTileButtonUrl = function(courseId, sectionId) {\n            return config.wwwroot + '/course/format/tiles/editimage.php?courseid=' + courseId + '&sectionid=' + sectionId;\n        };\n\n        /**\n         * Set the selected icon in the database via AJAX to the web service.\n         * When successful, then change the icon being displayed to the current editing user.\n         * If we are on an edit form, also select the selected icon in the hidden HTML selecftBox.\n         * The select box\n         * @param {number} sectionId\n         * @param {number} sectionNum\n         * @param {string} icon\n         * @param {string} displayname\n         * @param {string} pageType\n         * @param {number} courseId\n         * @param {string} imageType\n         * @param {number|undefined} sourcecontextid\n         * @param {number|undefined} sourceitemid\n         */\n        var setIcon = function (\n            sectionId, sectionNum, icon, displayname, pageType, courseId, imageType, sourcecontextid, sourceitemid\n        ) {\n            var selectedIcon = $(\"#selectedicon\");\n            var changeUiTilePhoto = function (jqueryObjToChange, imageUrl, imageType) {\n                var templateToRender = '';\n                var templateParams = {\n                    tileicon: icon,\n                    tileid: sectionNum,\n                    secid: sectionId,\n                    isediting: 1\n                };\n                switch (imageType) {\n                    case 'tileicon':\n                        templateToRender = 'tileicon';\n                        break;\n                    case 'tilephoto':\n                        templateToRender = 'tilebarphoto';\n                        templateParams.phototileurl = imageUrl;\n                        templateParams.phototileediturl = getPhotoTileButtonUrl(courseId, sectionId);\n                        templateParams.iamgetype = imageType;\n                        jqueryObjToChange.closest(\".tileiconcontainer\").addClass(\"hasphoto\");\n                        // Refresh the photos in library as may not are still be available.\n                        setTimeout(function () {\n                            getAndStoreIconSet(courseId);\n                        }, 3000);\n                        break;\n                    case 'draftfile':\n                        templateToRender = 'tilebarphoto';\n                        templateParams.phototileurl = imageUrl;\n                        templateParams.phototileediturl = getPhotoTileButtonUrl(courseId, sectionId);\n                        templateParams.iamgetype = imageType;\n                        break;\n                    default:\n                        throw new Error(\"Invalid image type \" + imageType);\n                }\n                var divToAnimate = pageType === \"course-view-tiles\" ? jqueryObjToChange : selectedIcon;\n                divToAnimate.animate({opacity: 0}, 500, function () {\n                    Templates.render(\"format_tiles/\" + templateToRender, templateParams)\n                        .done(function (html) {\n                            divToAnimate.html(html)\n                                .animate({opacity: 1}, 500);\n\n                            // This isn't ideal but in Totara, {{'pix}} does not render in JS via mustache.\n                            // So we do a quick check if our pix url is correct and fix it if not.\n                            var newTileIcon = $(\"#tile-icon-\" + sectionId).find(\".icon\");\n                            if (!newTileIcon.attr(\"src\").endsWith(templateParams.tileicon)) {\n                                newTileIcon.attr(\"src\", newTileIcon.attr(\"src\") + templateParams.tileicon);\n                            }\n                        });\n                });\n                if (pageType === \"course-editsection\" && imageType === \"tilephoto\") {\n                        $('input[name=tilephoto]').val(icon);\n                }\n            };\n            var ajaxIconPickArgs = {\n                image: icon,\n                courseid: courseId,\n                sectionid: sectionId,\n                imagetype: imageType,\n                sourcecontextid: sourcecontextid === undefined ? 0 : sourcecontextid,\n                sourceitemid: sourceitemid === undefined ? 0 : sourceitemid,\n                // Sectionid will be zero if relates to whole course not just one sec.\n            };\n            var setIconDbPromises = ajax.call([{\n                methodname: \"format_tiles_set_image\",\n                args: ajaxIconPickArgs\n            }]);\n            setIconDbPromises[0].done(function (response) {\n                if (response.status === true) {\n                    if (pageType === \"course-view-tiles\") {\n                        // We are changing an icon for a specific section from within the course.\n                        // We are doing this by clicking an existing icon.\n                        changeUiTilePhoto($(\"#tileicon_\" + sectionNum), response.imageurl, imageType);\n                    } else if (pageType === \"course-edit\" || pageType === \"course-editsection\") {\n                        // We are changing the icon using a drop down menu not the icon picker modal.\n                        // Either for the whole course or for one section.\n                        // Select new icon in drop down.\n                        var selectBox = $(\"#id_defaulttileicon\"); // Valid if page type is course-edit.\n                        if (pageType === \"course-editsection\") {\n                            selectBox = $(\"#id_tileicon\");\n                        }\n                        selectBox.val(icon);\n                        // Then change the image shown next to it.\n                        if (imageType === \"tileicon\") {\n                            Templates.renderPix(\"tileicon/\" + icon, \"format_tiles\", displayname)\n                                .done(function (newIcon) {\n                                    selectedIcon.html(newIcon);\n                                    if (pageType === \"course-editsection\") {\n                                        str.get_strings([\n                                            {key: \"tip\", component: \"format_tiles\"},\n                                            {key: \"tileselecttip\", component: \"format_tiles\"}\n                                        ]).done(function (strings) {\n                                            Notification.alert(\n                                                strings[0],\n                                                strings[1]\n                                            );\n                                        });\n                                    }\n                                });\n                            if (pageType === \"course-editsection\") {\n                                $('input[name=tilephoto]').val(\"\");\n                            }\n                        } else if (imageType === \"tilephoto\") {\n                            changeUiTilePhoto($(\"#tileicon_\" + sectionNum), response.imageurl, imageType);\n                        }\n                    }\n\n                }\n            }).fail(function(response) {\n                require([\"core/log\"], function(log) {\n                    log.error(\"Fail setting icon\");\n                    log.debug(response);\n                    log.debug(ajaxIconPickArgs);\n                });\n            });\n        };\n\n        /**\n         * When user clicks to launch an icon picker modal, set which section it relates to\n         * so that we know which section the icon clicked is for.  This is so that only one modal needs\n         * to be rendered (with all the icons in it) - we can use it to assign icons to any section\n         * @param {string} pageType\n         * @param {number} courseId\n         * @param {int} sectionId\n         * @param {int} section\n         * @param {int} allowPhotoTiles whether to render a button for the photo tile form - true or false).\n         * @param {string} documentationurl\n         */\n        var launchIconPicker = function (pageType, courseId, sectionId, section, allowPhotoTiles, documentationurl) {\n            // Launch icon picker can be a tile icon (if editing course) or a button (if on a form).\n            var populatePhotoLibrary = function(photosHTML, modalRoot, modal) {\n                var photoLibrary = $(\"#iconpickerphotos\");\n                photoLibrary.html(photosHTML);\n\n                // Load the images that are not too large immediately.\n                // (User draft files may be large so leave them to load last.\n                var largeFileThreshold = 200000; // Bytes.\n                var doLast = [];\n                photoLibrary.find(\"img\").each(function (index, image) {\n                    image = $(image);\n                    if (image.attr(\"data-filesize\") < largeFileThreshold) {\n                        setTimeout(function () {\n                            image.attr(\"src\", image.attr(\"data-url\"));\n                        }, index * 20);\n                    } else {\n                        doLast.push(image);\n                    }\n\n                    image.click(function (e) {\n                        var clickedImage = $(e.currentTarget);\n                        setIcon(\n                            modalRoot.attr(\"data-sectionid\"),\n                            modalRoot.attr(\"data-section\"),\n                            clickedImage.attr(\"data-filename\"),\n                            clickedImage.attr(\"data-filename\"),\n                            pageType,\n                            courseId,\n                            clickedImage.attr(\"data-imagetype\"),\n                            clickedImage.attr(\"data-contextid\"), // For existing photos - sourcecontextid.\n                            clickedImage.attr(\"data-itemid\") // For existing photos - sourceitemid.\n                        );\n                        modal.hide();\n                    });\n                });\n                setTimeout(function () {\n                    doLast.forEach(function (image) {\n                        image.attr(\"src\", image.attr(\"data-url\"));\n                    });\n                }, 1000);\n            };\n\n            if (typeof modalStored !== \"object\") {\n                // We only have one modal per page which we recycle.  We dont have it yet so create it.\n\n                var renderModal = function() {\n                    str.get_strings([\n                        {key: \"photolibrary\", component: \"format_tiles\"},\n                        {key: \"documentation\", component: \"format_tiles\"},\n                        {key: \"search\", component: \"core\"}\n                    ]).done(function (strings) {\n                        Templates.render(\"format_tiles/icon_picker_modal_body\", {\n                            /* eslint-disable-next-line camelcase */\n                            icon_picker_icons: iconSet,\n                            photosallowed: allowPhotoTiles,\n                            wwwroot: config.wwwroot,\n                            documentationurl: documentationurl,\n                            istotara: $(\"body\").hasClass(\"totara\"),\n                            photolibrarystring: strings[0],\n                            documentationstring: strings[1],\n                            searchstring: strings[2]\n                        }).done(function (iconsHTML) {\n                            require([\"core/modal_factory\"], function (modalFact) {\n                                modalFact.create({\n                                    type: modalFact.types.DEFAULT,\n                                    title: stringStore.pickAnIcon,\n                                    body: iconsHTML\n                                }).done(function (modal) {\n                                    modalStored = modal;\n                                    modal.setLarge();\n                                    modal.show();\n                                    var modalRoot = $(modal.root);\n                                    modalRoot.attr(\"id\", \"icon_picker_modal\");\n                                    modalRoot.attr(\"data-sectionid\", sectionId);\n                                    modalRoot.attr(\"data-section\", section);\n                                    modalRoot.addClass(\"icon_picker_modal\");\n                                    modalRoot.on(\"click\", \".pickericon\", function (e) {\n                                        var newIcon = $(e.currentTarget);\n                                        setIcon(\n                                            sectionId,\n                                            section,\n                                            newIcon.attr(\"data-icon\"),\n                                            newIcon.attr(\"title\"),\n                                            pageType,\n                                            courseId,\n                                            'tileicon',\n                                            newIcon.attr(\"data-contextid\"), // For existing photos - sourcecontextid.\n                                            newIcon.attr(\"data-itemid\") // For existing photos - sourcetemid.\n                                        );\n                                        modal.hide();\n                                    });\n                                    // Icon search box handling.\n                                    modalRoot.on(\"input\", \"input.iconsearch\", function (e) {\n                                        var searchText = e.currentTarget.value.toLowerCase();\n                                        modalRoot.find(\".pickericon\").show();\n                                        if (searchText.length >= 3) {\n                                            modalRoot.find(\".pickericon\").filter(function (index, icon) {\n                                                // Show all icons then hide icons which do not match the search term.\n                                                return $(icon).attr('data-original-title').toLowerCase().indexOf(searchText) < 0;\n                                            }).hide();\n                                        }\n                                    });\n                                    try {\n                                        $(\".pickericon\").tooltip();\n                                    } catch (err) {\n                                        require([\"core/log\"], function (log) {\n                                            log.debug(err);\n                                        });\n                                    }\n                                    if (allowPhotoTiles) {\n                                        // Set the URL for the photo tile button if used (done dynamically as contains section id).\n                                        var url = getPhotoTileButtonUrl(courseId, sectionId);\n                                        modalRoot.find('#phototilebtn')\n                                            .attr('href', url);\n                                        // Now that we have modal, if photo library tab is clicked we need to lazy load the photos.\n                                        $(\"#launch-photo-library\").click(function () {\n                                            if (recentPhotoSet.length !== 0) {\n                                                Templates.render(\"format_tiles/icon_picker_photos\", {\n                                                    /* eslint-disable-next-line camelcase */\n                                                    icon_picker_photos: recentPhotoSet,\n                                                    wwwroot: config.wwwroot\n                                                }).done(function (photosHTML) {\n                                                    populatePhotoLibrary(photosHTML, modalRoot, modal);\n                                                });\n                                            }\n                                        });\n                                    }\n                                });\n                            });\n                        });\n                    });\n                };\n                if (iconSet.length <= 0) {\n                    getAndStoreIconSet(courseId, renderModal);\n                } else {\n                    renderModal();\n                }\n            } else {\n                // We already have the modal so recycle it instead of re-rendering.\n                modalStored.root.attr(\"data-sectionid\", sectionId);\n                modalStored.root.attr(\"data-section\", section);\n                modalStored.root.off(\"click\");\n                modalStored.root.on(\"click\", \".pickericon\", function (e) {\n                    var newIcon = $(e.currentTarget);\n                    setIcon(\n                        sectionId,\n                        section,\n                        newIcon.attr(\"data-icon\"),\n                        newIcon.attr(\"title\"),\n                        pageType,\n                        courseId,\n                        newIcon.attr(\"data-imagetype\"),\n                        newIcon.attr(\"data-contextid\"), // For existing photos - sourcecontextid.\n                        newIcon.attr(\"data-itemid\") // For existing photos - sourcetemid.\n                    );\n                    modalStored.hide();\n                });\n                if (allowPhotoTiles) {\n                    // Set the URL for the photo tile button if used (done dynamically as contains section id).\n                    var url = getPhotoTileButtonUrl(courseId, sectionId);\n                    modalStored.root.find('#phototilebtn')\n                        .attr('href', url);\n                }\n                modalStored.show();\n            }\n        };\n\n        return {\n            init: function (courseId, pageType, allowPhotoTiles, documentationurl) {\n                $(document).ready(function () {\n                    var stringKey = allowPhotoTiles ? \"picknewiconphoto\" : \"picknewicon\";\n                    str.get_string(stringKey, \"format_tiles\").done(function (pickAnIcon) {\n                        stringStore.pickAnIcon = pickAnIcon;\n                    });\n                    // Get the core icon set now so that we don't have to wait later.\n                    getAndStoreIconSet(courseId);\n\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n                    pageContent.on(\"click\", \".launchiconpicker\", function (e) {\n                        e.preventDefault();\n                        var clickedIcon = $(e.currentTarget);\n                        launchIconPicker(\n                            pageType,\n                            courseId,\n                            clickedIcon.attr('data-sectionid'),\n                            clickedIcon.attr('data-section'),\n                            allowPhotoTiles,\n                            documentationurl\n                        );\n                    });\n                });\n            }\n        };\n    }\n);\n"],"names":["define","$","Templates","ajax","str","Notification","config","modalStored","stringStore","pickAnIcon","iconSet","recentPhotoSet","getAndStoreIconSet","courseId","callback","photosPromises","call","methodname","args","courseid","done","response","photos","JSON","parse","icons","Object","keys","forEach","icon","push","filename","displayname","tileiconcontext","attributes","name","value","wwwroot","theme","length","require","log","error","debug","photoNames","map","photo","find","each","index","ph","indexOf","attr","fadeOut","status","fail","getPhotoTileButtonUrl","sectionId","setIcon","sectionNum","pageType","imageType","sourcecontextid","sourceitemid","selectedIcon","changeUiTilePhoto","jqueryObjToChange","imageUrl","templateToRender","templateParams","tileicon","tileid","secid","isediting","phototileurl","phototileediturl","iamgetype","closest","addClass","setTimeout","Error","divToAnimate","animate","opacity","render","html","newTileIcon","endsWith","val","ajaxIconPickArgs","image","sectionid","imagetype","undefined","setIconDbPromises","imageurl","selectBox","renderPix","newIcon","get_strings","key","component","strings","alert","launchIconPicker","section","allowPhotoTiles","documentationurl","populatePhotoLibrary","photosHTML","modalRoot","modal","photoLibrary","largeFileThreshold","doLast","click","e","clickedImage","currentTarget","hide","renderModal","icon_picker_icons","photosallowed","istotara","hasClass","photolibrarystring","documentationstring","searchstring","iconsHTML","modalFact","create","type","types","DEFAULT","title","body","setLarge","show","root","on","searchText","toLowerCase","filter","tooltip","err","url","icon_picker_photos","off","init","document","ready","stringKey","get_string","pageContent","preventDefault","clickedIcon"],"mappings":"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"}