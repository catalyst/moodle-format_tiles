{"version":3,"sourceRoot":"..","sources":["server/course/format/tiles/amd/src/browser_storage.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript Module to handle browser storage for format_tiles for student view.\n * (Can also be used by staff when they view the student view).\n * Stores and retrieves course content and settings\n * e.g. which filter button do I have pressed\n *\n * @module browser_storage\n * @package course/format\n * @subpackage tiles\n * @copyright 2018 David Watson {@link http://evolutioncode.uk}\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since Moodle 3.3\n */\n/* global localStorage, sessionStorage, setTimeout*/\n/* eslint space-before-function-paren: 0 */\n\ndefine([\"jquery\", \"format_tiles/browser_storage_set_up\"], function ($, storageSetUp) {\n    \"use strict\";\n\n    var courseId;\n    var userId;\n\n    var localStorageKeyElements = {\n        prefix: \"mdl-tiles-\",\n        course: \"mdl-tiles-course-\",\n        lastSection: \"-lastSecId\",\n        content: \"-content\",\n        lastUpdated: \"-lastUpdated\",\n        collapseSecZero: \"-collapsesec0\",\n        user: \"-user-\",\n        section: \"-sec-\",\n        userChoicePrefix: \"mdl-tiles-userPrefStorage-\"\n    };\n\n    var MAX_SECTIONS_TO_STORE;\n    /**\n     * The last visited section number will be stored with a key in the format\n     * mdl-tiles-course-[courseid]-lastSecId\n     * @returns {string} the key to use for this course\n     */\n    var encodeLastVistedSectionKeyName = function() {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.lastSection;\n    };\n\n    /**\n     The last visited section's content will be stored with a key in the format\n     * mdl-tiles-course-[courseid]-sec-[sectionid]-content\n     * @param {number} sectionId the section Id we are interested in\n     * @returns {string} the key to use for this course section's content\n     */\n    var encodeContentKeyName = function(sectionId) {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.section + sectionId.toString()\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.content;\n    };\n\n    /**\n     * The last update time for the content for this section\n     * will be stored with a key in the format\n     * mdl-tiles-course-[courseid]-sec-[sectionid]-lastUpdated\n     * @param {number} sectionId the section Id we are interested in\n     * @returns {string} the key to use for this course section's content update time\n     */\n    var encodeContentLastUpdatedKeyName = function(sectionId) {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.section + sectionId.toString()\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.lastUpdated;\n    };\n\n    /**\n     * Whether or not section zero is collapsed for this course/user\n     * will be stored with a key in this format\n     * @returns {string} the key to use\n     */\n    var collapseSecZeroKey = function() {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.collapseSecZero;\n    };\n\n    /**\n     * Check if the current key name is a last updated content key or not\n     * The format used if this is true will be\n     * mdl-tiles-course-[courseid]-sec-[sectionid]-lastUpdated\n     * Check for this and return true if this key matches\n     * @param {string} key the key to check\n     * @returns {boolean} whether it matches or not\n     */\n    var isContentLastUpdatedKeyName = function(key) {\n        return key.indexOf(localStorageKeyElements.prefix) === 0\n            && key.substr(-localStorageKeyElements.lastUpdated.length) === localStorageKeyElements.lastUpdated;\n    };\n\n    /**\n     * Store HTML from a section (or the landing page if sectionId is zero) into session storage\n     * Considered using core/storagewrapper, core/sessionstorage and core/localstorage but they\n     * don't contain much so implemented directly\n     * @param {string} courseId\n     * @param {number} sectionId\n     * @param {String} html\n     */\n    var storeCourseContent = function (courseId, sectionId, html) {\n        if (sectionId === undefined || courseId === undefined) {\n            throw new Error(\"Missing section id\");\n        }\n        try {\n            if (html !== undefined && html !== \"\"\n                && storageSetUp.Enabled.session && storageSetUp.storageAllowed() === true) {\n                sessionStorage.setItem(encodeContentKeyName(sectionId), html);\n                sessionStorage.setItem(\n                    encodeContentLastUpdatedKeyName(sectionId),\n                    Math.round(Date.now() / 1000).toString()\n                );\n            } else {\n                // HTML is empty so remove from store if present.\n                sessionStorage.removeItem(encodeContentKeyName(sectionId));\n                sessionStorage.removeItem(encodeContentLastUpdatedKeyName(sectionId));\n            }\n        } catch (err) {\n            require([\"core/log\"], function(log) {\n                log.debug(err);\n            });\n        }\n    };\n\n    /**\n     * Decode a storage key in the format\n     * @param {string} key the text value of key e.g. mdl-tiles-course-3-sec-10-user-2-lastUpdated\n     * @return {object} json with key values\n     */\n    var decodeLastUpdatedKey = function (key) {\n        var splitKey = key.split(\"-\");\n        if (isContentLastUpdatedKeyName(key)) {\n            return {\n                courseId: parseInt(splitKey[splitKey.indexOf(\"course\") + 1]),\n                sectionId: parseInt(splitKey[splitKey.indexOf(\"sec\") + 1]),\n                userId: parseInt(splitKey[splitKey.indexOf(\"user\") + 1]),\n                title: \"lastUpdated\"\n            };\n        } else {\n            throw new Error(\"Invalid lastUpdated key\");\n        }\n    };\n\n    /**\n     * Clean up items in local storage and session storage\n     * For SESSION STORAGE, these will be course content HTML items or corresponding time records for them,\n     * so to ensure we don't get too many, on each course access, we delete them if they are older than the threshold\n     * This applies even if they relate to a different course to the one now being visited.\n     * For LOCAL STORAGE, items will be very small (no HTML) so we only clear them if the user has selected to\n     * clear browser storage. They include IDs of sections last visited in each course, whether section zero is collapsed etc\n     * @param {number} contentDeleteMins how many minutes old a stored content HTML item must be, before it is be deleted here\n     * @param {number} clearBrowserStorage if true, we are deleting all session and local storage on user command\n     * @param {number} maxNumberToKeep how many items of HTML can be kept in store in total (evict the rest)\n     */\n    var cleanUp = function (contentDeleteMins, clearBrowserStorage, maxNumberToKeep) {\n        // Clean localStorage first - only clear if we are clearing all browser storage.\n        // Otherwise leave it (used for last visited section IDs etc).\n        if (clearBrowserStorage) {\n            Object.keys(localStorage).filter(function (key) {\n                return key.indexOf(localStorageKeyElements.prefix) === 0\n                    && key.indexOf(localStorageKeyElements.userChoicePrefix) !== 0;\n            }).forEach(function (item) {\n                // Item does relate to this plugin.\n                // It is not the user's preference about whether to use storage or not (keep that).\n                localStorage.removeItem(item);\n            });\n\n            // Now clean sessionStorage (used for course content HTML).\n            Object.keys(sessionStorage).filter(function (key) {\n                // Filter to only keys relating to this plugin.\n                return key.indexOf(localStorageKeyElements.prefix) === 0;\n            }).forEach(function (itemKey) {\n                // Item does relate to this plugin.\n                if (isContentLastUpdatedKeyName(itemKey)) {\n                    var params = decodeLastUpdatedKey(itemKey);\n                    // Remove *all* items for this plugin regardless of age.\n                    storeCourseContent(params.courseId, params.sectionId, \"\"); // Empty last arg will mean deletion.\n                }\n            });\n        } else {\n            // Remove *stale* items for this plugin.\n            var staleTime = Math.round(Date.now() / 1000) - contentDeleteMins * 60;\n            Object.keys(sessionStorage).filter(function (key) {\n                // Filter to only keys relating to this plugin.\n                return key.indexOf(localStorageKeyElements.prefix) === 0;\n            }).forEach(function (itemKey) {\n                if (isContentLastUpdatedKeyName(itemKey)) {\n                    var params = decodeLastUpdatedKey(itemKey);\n                    if (sessionStorage.getItem(itemKey) < staleTime\n                        || contentDeleteMins === 0) {\n                        // Item is stale - older than contentDeleteMins settings.\n                        // this key represents an item with a last update date older than the delete threshold.\n                        storeCourseContent(params.courseId, params.sectionId, \"\"); // Empty last arg will mean deletion.\n                    }\n                }\n            });\n\n            // Now check if we still have too many items and if we do, remove the oldest.\n            var lastUpdateKeys = Object.keys(sessionStorage).filter(function (item) {\n                return isContentLastUpdatedKeyName(item);\n            });\n            if (lastUpdateKeys.length > maxNumberToKeep) {\n                // We don't need this step if clearing whole browser storage as it is already cleared above.\n                // get all the update times in order from newest to oldest.\n                var lastUpdateTimes = lastUpdateKeys.map(function (key) {\n                    return parseInt(sessionStorage[key]);\n                }).sort();\n                // Set a cut off time so that we only have maxNumberToKeep newer than the cut off.\n                var cutOffTime = lastUpdateTimes[lastUpdateTimes.length - maxNumberToKeep];\n                if (maxNumberToKeep === 0) {\n                    cutOffTime = Date.now();\n                }\n                var params;\n                // Remove course content for all items older than the cut off time.\n                lastUpdateKeys.filter(function (key) {\n                    return sessionStorage[key] < cutOffTime;\n                }).forEach(function (expiredKey) {\n                    params = decodeLastUpdatedKey(expiredKey);\n                    storeCourseContent(params.courseId, params.sectionId, \"\"); // Empty \"\" will remove item.\n                });\n            }\n        }\n    };\n\n    /**\n     * Clear all storage used by this plugin.\n     */\n    var clearAllStorage = function() {\n        cleanUp(0, 1, 1);\n    };\n\n    /**\n     * Set the last visited section for the user for this course\n     * Used to reload that section on next visit\n     * Data is just an integer for section if\n     * Uses local storage not session storage so that it persists\n     * @param {number} sectionNum the section number last visited\n     */\n    var setLastVisitedSection = function (sectionNum) {\n        if (sectionNum && storageSetUp.Enabled.local) {\n            localStorage.setItem(encodeLastVistedSectionKeyName(), sectionNum.toString());\n        } else {\n            localStorage.removeItem(encodeLastVistedSectionKeyName());\n        }\n    };\n\n    var Module = {\n\n        init: function (course, maxContentSectionsToStore, isEditing, sectionNum,\n                        storedContentDeleteMins, assumeDataStoreConsent, user) {\n            courseId = course.toString();\n            userId = user.toString();\n            MAX_SECTIONS_TO_STORE = parseInt(maxContentSectionsToStore);\n            storageSetUp.init(userId, assumeDataStoreConsent, clearAllStorage);\n\n            $(document).ready(function () {\n\n                if (storageSetUp.storageAllowed() !== true) {\n                    cleanUp(0, 1, 0);\n                }\n                if (isEditing) {\n                    // Teacher is editing now so not using JS nav but set their current section for when they stop editing.\n                    setLastVisitedSection(sectionNum);\n                    // Clear storage in case they just changed something.\n                    cleanUp(0, 1, 0);\n                    if (storageSetUp.Enabled.session) {\n                        storeCourseContent(courseId, sectionNum, \"\");\n                    }\n                    // If user switches to another role, clear any stored content so they only see new role's content.\n                    $('a.menu-action[data-title=\"switchroleto,moodle\"]').click(function() {\n                        cleanUp(0, 1, 0);\n                    });\n                } else {\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n                    pageContent.on(\"click\", \".tile\", function () {\n                        // Evict unused HTML content from session storage to reduce footprint (after a delay).\n                        setTimeout(function () {\n                            cleanUp(parseInt(storedContentDeleteMins), 0, MAX_SECTIONS_TO_STORE);\n                        }, 2000);\n                    });\n                }\n            });\n        },\n\n        storageEnabledSession: function () {\n            return storageSetUp.Enabled.session;\n        },\n        storageEnabledLocal: function () {\n            return storageSetUp.Enabled.local;\n        },\n        storagestorageSetUperence: function () {\n            return storageSetUp.storageAllowed();\n        },\n\n        /**\n         * Get the user's last visited section id for this course\n         * @return {string|null} the section ID or null if none stored\n         */\n        getLastVisitedSection: function () {\n            return storageSetUp.Enabled.local && localStorage.getItem(encodeLastVistedSectionKeyName());\n        },\n\n        /**\n         * Retrieve HTML from session storage for this section\n         * @param {number} courseId the id for this course\n         * @param {number} sectionId id for this section\n         * @return {String} the HTML\n         */\n        getCourseContent: function (courseId, sectionId) {\n            return sessionStorage.getItem(encodeContentKeyName(sectionId));\n        },\n\n        /**\n         * Check the age of any content we have stored for this course section\n         * @param {number} courseId\n         * @param {number} sectionId\n         * @return {number|boolean} the age in seconds if we have content or false if none\n         */\n        getStoredContentAge: function (courseId, sectionId) {\n            var storedTime = parseInt(\n                sessionStorage.getItem(\n                    encodeContentLastUpdatedKeyName(sectionId)\n                )\n            );\n            if (storedTime) {\n                return Math.round(Date.now() / 1000 - storedTime);\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * When user collapsed or expands section zero, record their choice in localStorage so\n         * that it can be applied next time they visit\n         * @param {string} status to be applied\n         */\n        setSecZeroCollapseStatus: function (status) {\n            if (storageSetUp.Enabled.local && storageSetUp.storageAllowed()) {\n                if (status === \"collapsed\") {\n                    localStorage.removeItem(collapseSecZeroKey());\n                } else {\n                    localStorage.setItem(collapseSecZeroKey(), \"1\");\n                }\n            }\n        },\n        /**\n         * Get the last status of section zero for the present course from localStorage\n         * @returns {boolean} whether collapsed or not\n         */\n        getSecZeroCollapseStatus: function () {\n            return !!localStorage.getItem(collapseSecZeroKey());\n        },\n\n        storeCourseContent: function (courseId, sectionId, html) {\n            // Return object (\"public\") access to the \"private\" method above.\n            storeCourseContent(courseId, sectionId, html);\n        },\n\n        cleanUpStorage: function () {\n            // Return object (\"public\") access to the \"private\" method above (used when teacher edits course settings).\n            clearAllStorage();\n        },\n\n        setLastVisitedSection: function (sectionNum) {\n            // Return object (\"public\") access to the \"private\" method above.\n            if (storageSetUp.storageAllowed()) {\n                setLastVisitedSection(sectionNum);\n            }\n        }\n    };\n\n    return Module;\n});"],"names":["define","$","storageSetUp","courseId","userId","localStorageKeyElements","prefix","course","lastSection","content","lastUpdated","collapseSecZero","user","section","userChoicePrefix","MAX_SECTIONS_TO_STORE","encodeLastVistedSectionKeyName","encodeContentKeyName","sectionId","toString","encodeContentLastUpdatedKeyName","collapseSecZeroKey","isContentLastUpdatedKeyName","key","indexOf","substr","length","storeCourseContent","html","undefined","Error","Enabled","session","storageAllowed","sessionStorage","setItem","Math","round","Date","now","removeItem","err","require","log","debug","decodeLastUpdatedKey","splitKey","split","parseInt","title","cleanUp","contentDeleteMins","clearBrowserStorage","maxNumberToKeep","Object","keys","localStorage","filter","forEach","item","itemKey","params","staleTime","getItem","lastUpdateKeys","lastUpdateTimes","map","sort","cutOffTime","expiredKey","clearAllStorage","setLastVisitedSection","sectionNum","local","Module","init","maxContentSectionsToStore","isEditing","storedContentDeleteMins","assumeDataStoreConsent","document","ready","click","pageContent","on","setTimeout","storageEnabledSession","storageEnabledLocal","storagestorageSetUperence","getLastVisitedSection","getCourseContent","getStoredContentAge","storedTime","setSecZeroCollapseStatus","status","getSecZeroCollapseStatus","cleanUpStorage"],"mappings":"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"}