{"version":3,"sourceRoot":"..","sources":["server/course/format/tiles/amd/src/completion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Load the format_tiles JavaScript for the course edit settings page /course/edit.php?id=xxx\n *\n * @module      format_tiles\n * @package     course/format\n * @subpackage  tiles\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/config\", \"format_tiles/completion\"], function ($, Templates, config) {\n    \"use strict\";\n\n    var courseId;\n    var strings = {};\n    var dataKeys = {\n        cmid: \"data-cmid\",\n        numberComplete: \"data-numcomplete\",\n        numberOutOf: \"data-numoutof\",\n        section: \"data-section\"\n    };\n    var Selector = {\n        launchModuleModal: '[data-action=\"launch-tiles-module-modal\"]',\n        launchResourceModal: '[data-action=\"launch-tiles-resource-modal\"]',\n        pageContent: \"#page-content\",\n        regionMain: \"#region-main\",\n        resourceModule: '.activity.resource',\n        completeonevent: \".completeonevent\",\n        completeonview: \".completeonview\",\n        activity: \"li.activity\",\n        section: \"li.section.main\",\n        togglecompletion: \"form.togglecompletion\"\n    };\n\n    var Icon = {\n        completionYes: 'completion-icon-y',\n        completionNo: 'completion-icon-n'\n    };\n\n    // This will be populated on init with the items which we treat as labels.\n    // I.e. which we ignore for completion tracking.\n    var noCompletionTrackingMods = [];\n\n    /**\n     * When toggleCompletionTiles() makes an AJAX call it needs to send some data\n     * and this helps assemble the data\n     * @param {number} tileId which tile is this for\n     * @param {number} numComplete how many items has the user completed\n     * @param {number} outOf how many items are there to complete\n     * @param {boolean} asPercent should we show this as a percentage\n     * @returns {{}}\n     */\n    var progressTemplateData = function (tileId, numComplete, outOf, asPercent) {\n        var data = {\n            tileid: tileId,\n            numComplete: numComplete,\n            numOutOf: outOf,\n            showAsPercent: asPercent,\n            percent: Math.round(numComplete / outOf * 100),\n            percentCircumf: 106.8,\n            percentOffset: Math.round(((outOf - numComplete) / outOf) * 106.8),\n            isComplete: false,\n            isSingleDigit: false\n        };\n        if (tileId === 0) {\n            data.isOverall = 1;\n        } else {\n            data.isOverall = 0;\n        }\n        if (numComplete >= outOf) {\n            data.isComplete = true;\n        }\n        if (data.percent < 10) {\n            data.isSingleDigit = true;\n        }\n        return data;\n    };\n\n    /**\n     * When a progress change happens, e.g. an item is marked as complete or not, this fires.\n     * It changes the current tile's progress up or down by 1 according to the progressChange arg.\n     * It then does the same for the course's overall progress indicator.\n     * @param {int} sectionNum the number of this tile/section.\n     * @param {object} tileProgressIndicator the indicator for this tile\n     * @param {int} progressChange the amount we are changing e.g. +1 or -1\n     */\n    var changeProgressIndicators = function(sectionNum, tileProgressIndicator, progressChange) {\n        // TODO create a web service to get current value from server so we know it's correct.\n        // This can also handle updating the competion status instead of core below.\n        if (tileProgressIndicator.attr(dataKeys.numberComplete) === 0 && progressChange < 0) {\n            // If we are already at zero, do not reduce.  May happen rarely if user presses repeatedly.\n            // Will not cause a long term issue as will be resolved when user refreshes page.\n            return;\n        }\n        // Get the tile's new progress value.\n        var newTileProgressValue = Math.min(\n            parseInt(tileProgressIndicator.attr(dataKeys.numberComplete)) + progressChange,\n            tileProgressIndicator.attr(dataKeys.numberOutOf)\n        );\n        // Get the new overall progress value.\n        var overallProgressIndicator = $(\"#tileprogress-0\");\n        var newOverallProgressValue = Math.min(\n            parseInt(overallProgressIndicator.attr(dataKeys.numberComplete)) + progressChange,\n            overallProgressIndicator.attr(dataKeys.numberOutOf)\n        );\n\n        // Render and replace the progress indicator for *this tile*.\n        Templates.render(\"format_tiles/progress\", progressTemplateData(\n            sectionNum,\n            newTileProgressValue,\n            tileProgressIndicator.attr(dataKeys.numberOutOf),\n            tileProgressIndicator.hasClass(\"percent\")\n        )).done(function (html) {\n            // Need to repeat jquery selector as it is being replaced (replacwith).\n            tileProgressIndicator.replaceWith(html);\n            $(\"#tileprogress-\" + sectionNum).tooltip();\n        });\n\n        // Render and replace the *overall* progress indicator for the *whole course*.\n        Templates.render(\"format_tiles/progress\", progressTemplateData(\n            0,\n            newOverallProgressValue,\n            overallProgressIndicator.attr(dataKeys.numberOutOf),\n            true\n        )).done(function (html) {\n            $(\"#tileprogress-0\").replaceWith(html).fadeOut(0).animate({opacity: 1}, 500);\n        });\n    };\n\n    /**\n     * When a user clicks a completion tracking checkbox in this format, pass the click through to core\n     * This is partly based on the core functionality in completion.js but is included here as otherwise clicks on\n     * check boxes added dynamically after page load are not detected\n     * @param {object} form the form and check box\n     */\n    var toggleCompletionTiles = function (form) {\n        // Get the existing completion state for this completion form.\n        // For PDFs there will be two forms - one in the section and one within the modal - grab both with class.\n        var cmid = form.attr(dataKeys.cmid);\n        var completionState = $(\"#completionstate_\" + cmid);\n        var data = {\n            id: cmid,\n            completionstate: parseInt(completionState.attr(\"value\")),\n            fromajax: 1,\n            sesskey: config.sesskey\n        };\n        form.tooltip('hide');\n        var url = config.wwwroot + \"/course/togglecompletion.php\";\n        $.post(url, data, function (returnData, status) {\n            if (status === \"success\" && returnData === \"OK\") {\n                var progressChange;\n                var completionImage = $(\".completion_img_\" + cmid);\n                if (completionState.attr(\"value\") === \"1\") {\n                    // We have checked a progress box.\n                    // Change check box(es) to ticked,\n                    // And set the value(s) to zero so that if re-clicked, goes back to unchecked.\n                    $(\"#completion_dynamic_change\").attr(\"value\", 0);\n                    completionState.attr(\"value\", 0);\n                    progressChange = +1;\n                    completionImage.addClass(Icon.completionYes).removeClass(Icon.completionNo);\n                    $(\".complete-y-\" + cmid).fadeIn(200).fadeOut(1000);\n                } else {\n                    // We have un-checked a progress box.\n                    $(\"#completion_dynamic_change\").attr(\"value\", 1);\n                    completionState.attr(\"value\", 1);\n                    progressChange = -1;\n                    $(\".complete-n-\" + cmid).fadeIn(200).fadeOut(1000);\n                    completionImage.addClass(Icon.completionNo).removeClass(Icon.completionYes);\n                }\n                if (!completionState.closest(Selector.activity).is(\n                    // If the activity is not one of the mods we ignore for completion tracking e.g. label.\n                    noCompletionTrackingMods.map(function(cls) {\n                        return \".\" + cls;\n                    }).join(','))\n                ) {\n                    // We do not do this for labels, as they are not included in completion tracking.\n                    changeProgressIndicators(\n                        form.attr(dataKeys.section),\n                        $(\"#tileprogress-\" + form.attr(dataKeys.section)),\n                        progressChange\n                    );\n                    require([\"format_tiles/browser_storage\"], function(storage) {\n                        storage.storeCourseContent(courseId, form.attr(\"data-section\"), \"\");\n                    });\n                }\n            }\n        })\n            .fail(function () {\n                throw new Error(\"Failed to register completion change with server\");\n            });\n    };\n\n    /**\n     * When automatic completion tracking is being used, on modal launch we need to:\n     * - change the completion icon to complete.\n     * - recalculate the % complete for this tile and overall.\n     * We do not need to notify the server that the item is complete.\n     * This is because that is already covered when course_mod_modal calls log_mod_view().\n     * I.e. we just update the UI here because the data is handled elsewhere.\n     * @param {object} activity the activity which contains the completion icon\n     */\n    var markAsAutoCompleteInUI = function(activity) {\n        var sectionNum = activity.closest(Selector.section).attr('data-section');\n        if (activity.hasClass(\"completeonview\")) {\n            var completionIcon = activity.find('.completion-icon');\n            var parent = completionIcon.closest(\".completioncheckbox\");\n            if (parent.attr('data-ismanual') === \"0\" && parent.attr('data-completionstate') === \"0\") {\n                completionIcon.addClass(Icon.completionYes).removeClass(Icon.completionNo);\n                parent.attr('data-completionstate', 1);\n                parent.attr('data-original-title', strings.completeauto);\n                parent.tooltip();\n                changeProgressIndicators(sectionNum, $(\"#tileprogress-\" + sectionNum), 1);\n            }\n        }\n        // Even if it is not a \"complete on view\" activity, clear UI storage so that when user returns it is correct.\n        require([\"format_tiles/browser_storage\"], function (storage) {\n            storage.storeCourseContent(courseId, sectionNum, \"\");\n        });\n    };\n\n    return {\n        init: function (courseIdInit, strCompleteAuto, labelLikeCourseMods) {\n            courseId = courseIdInit;\n            $(document).ready(function () {\n                noCompletionTrackingMods = JSON.parse(labelLikeCourseMods);\n                strings.completeauto = strCompleteAuto;\n                // Trigger toggle completion event if check box is clicked.\n                // Included like this so that later dynamically added boxes are covered.\n                $(\"body\").on(\"click\", Selector.togglecompletion, function (e) {\n                    // Send the toggle to the database and change the displayed icon.\n                    e.preventDefault();\n                    toggleCompletionTiles($(e.currentTarget));\n                });\n\n                var pageContent = $(\"#page-content\");\n                if (pageContent.length === 0) {\n                    // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                    pageContent = $(\"#region-main\");\n                }\n                pageContent\n                    .on(\"click\", Selector.launchModuleModal + \", \" + Selector.launchResourceModal, function (e) {\n                        var clickedActivity = $(e.currentTarget).closest(Selector.activity);\n                        if (clickedActivity.hasClass(\"completeonview\")) {\n                            markAsAutoCompleteInUI(clickedActivity);\n                        }\n                    });\n                $(Selector.pageContent)\n                    .on(\"click\", Selector.completeonevent + \", \" + Selector.completeonview, function (e) {\n                        // For items which are auto complete on view or event, but don't launch in a modal e.g. Quiz.\n                        // We just clear the UI storage so that when user returns to this page, new completion state shows.\n                        var sectionNum = $(e.currentTarget).closest(Selector.section).attr('data-section');\n                        require([\"format_tiles/browser_storage\"], function(storage) {\n                            storage.storeCourseContent(courseId, sectionNum, \"\");\n                        });\n                    });\n            });\n        },\n        // Allow this to be accessed from elsewhere e.g. format_tiles module.\n        markAsAutoCompleteInUI: function(courseIdInit, activity) {\n            courseId = courseIdInit;\n            markAsAutoCompleteInUI(activity);\n        }\n    };\n});"],"names":["define","$","Templates","config","courseId","strings","dataKeys","cmid","numberComplete","numberOutOf","section","Selector","launchModuleModal","launchResourceModal","pageContent","regionMain","resourceModule","completeonevent","completeonview","activity","togglecompletion","Icon","completionYes","completionNo","noCompletionTrackingMods","progressTemplateData","tileId","numComplete","outOf","asPercent","data","tileid","numOutOf","showAsPercent","percent","Math","round","percentCircumf","percentOffset","isComplete","isSingleDigit","isOverall","changeProgressIndicators","sectionNum","tileProgressIndicator","progressChange","attr","newTileProgressValue","min","parseInt","overallProgressIndicator","newOverallProgressValue","render","hasClass","done","html","replaceWith","tooltip","fadeOut","animate","opacity","toggleCompletionTiles","form","completionState","id","completionstate","fromajax","sesskey","url","wwwroot","post","returnData","status","completionImage","addClass","removeClass","fadeIn","closest","is","map","cls","join","require","storage","storeCourseContent","fail","Error","markAsAutoCompleteInUI","completionIcon","find","parent","completeauto","init","courseIdInit","strCompleteAuto","labelLikeCourseMods","document","ready","JSON","parse","on","e","preventDefault","currentTarget","length","clickedActivity"],"mappings":"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"}